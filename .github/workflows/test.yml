name: Test and Lint

on:
  push:
    branches:
      - '**'
    paths:
      - 'edge-backend/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'edge-backend/**'
      - '.github/workflows/test.yml'

env:
  NODE_VERSION: '20'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: edge-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: edge-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: |
          if [ -f "package.json" ] && grep -q "\"format:check\"" package.json; then
            npm run format:check
          else
            echo "No format:check script found, skipping..."
          fi

  type-check:
    name: TypeScript Type Checking
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: edge-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: edge-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler
        run: npm run type-check

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: edge-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: edge-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: edge-backend/coverage
          retention-days: 7

      - name: Coverage report comment
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const coveragePath = path.join('edge-backend', 'coverage', 'coverage-summary.json');
            
            if (fs.existsSync(coveragePath)) {
              const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
              const total = coverage.total;
              
              const coverageReport = `## üìä Test Coverage Report
              
              | Type | Coverage | Details |
              |------|----------|---------|
              | Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |
              | Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |
              | Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |
              | Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageReport
              });
            }

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: edge-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: edge-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Validate build output
        run: |
          echo "Checking build output..."
          if [ -d "dist" ]; then
            echo "‚úÖ Build output found in dist/"
            ls -la dist/
          elif [ -d "build" ]; then
            echo "‚úÖ Build output found in build/"
            ls -la build/
          else
            echo "‚ö†Ô∏è No standard build output directory found"
          fi

      - name: Dry-run Wrangler deployment
        run: |
          if command -v wrangler &> /dev/null; then
            npx wrangler deploy --dry-run --env staging
          else
            echo "Wrangler not found, skipping dry-run..."
          fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: edge-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: edge-backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Run security scan
        run: |
          if [ -f "package.json" ] && grep -q "\"security\"" package.json; then
            npm run security
          else
            echo "No security script found, running basic audit..."
            npm audit --json > audit-report.json || true
          fi

  all-tests-pass:
    name: All Tests Pass
    needs: [lint, type-check, test, build, security]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.type-check.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå One or more required checks failed"
            exit 1
          else
            echo "‚úÖ All required checks passed"
          fi

      - name: Set commit status
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'All tests passed',
              context: 'ci/tests'
            });